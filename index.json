[{"content":"Welcome to your new Hugo blog powered by Hugo and PaperMod!\n","permalink":"https://azasdw.github.io/posts/hello-world/","summary":"\u003cp\u003eWelcome to your new Hugo blog powered by Hugo and PaperMod!\u003c/p\u003e","title":"Hello World"},{"content":"在日常开发中，参数校验是一个常见需求，而 Java 的 Bean Validation 提供了一种优雅的方式，通过注解对对象的字段进行校验。Spring 对此功能进行了深度整合，使得在 Controller、Service 等层面实现校验变得非常简单。\n本文将从以下几个方面介绍如何在 Spring 中使用 Validation 注解：\n引入依赖 简单示例 常见校验注解分类与说明 分组校验 自定义校验 1. 引入依赖 在使用 Spring 校验功能之前，需要引入相关依赖。\n通常使用 Hibernate Validator 作为 JSR 380 的实现。\nMaven 1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-validation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Gradle 1 implementation \u0026#39;org.springframework.boot:spring-boot-starter-validation\u0026#39; 2. 简单示例 以下是一个基本的参数校验示例。我们通过 @NotNull, @Size 等注解对参数进行校验，并在校验失败时返回错误信息。\n数据模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; public class User { @NotNull(message = \u0026#34;用户名不能为空\u0026#34;) @Size(min = 3, max = 15, message = \u0026#34;用户名长度必须在3到15个字符之间\u0026#34;) private String username; @NotNull(message = \u0026#34;密码不能为空\u0026#34;) @Size(min = 6, message = \u0026#34;密码长度至少为6个字符\u0026#34;) private String password; // Getter \u0026amp; Setter public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.*; import javax.validation.Valid; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) @Validated public class UserController { @PostMapping(\u0026#34;/register\u0026#34;) public String register(@RequestBody @Valid User user) { return \u0026#34;用户注册成功：\u0026#34; + user.getUsername(); } } 测试 请求示例：\n请求 Body 1 2 3 4 { \u0026#34;username\u0026#34;: \u0026#34;john\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34; } 响应成功 用 户 注 册 成 功 ： j o h n 错误请求 Body 1 2 3 4 { \u0026#34;username\u0026#34;: \u0026#34;jo\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026#34; } 响应失败 1 2 3 4 5 6 { \u0026#34;timestamp\u0026#34;: \u0026#34;2024-11-18T12:34:56.789\u0026#34;, \u0026#34;status\u0026#34;: 400, \u0026#34;error\u0026#34;: \u0026#34;Bad Request\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;用户名长度必须在3到15个字符之间; 密码不能为空\u0026#34; } 3. 常见校验注解分类与说明 通用校验 注解 功能说明 示例 @NotNull 字段不能为空 @NotNull(message=\u0026quot;必填\u0026quot;) @NotBlank 字符串非空且非空白 @NotBlank(message=\u0026quot;必填\u0026quot;) @NotEmpty 集合或数组不能为空 @NotEmpty @Size 字符串、集合长度校验 @Size(min=1, max=10) 数值校验 注解 功能说明 示例 @Min 值必须大于等于指定值 @Min(18) @Max 值必须小于等于指定值 @Max(100) @Positive 值必须为正数 @Positive @PositiveOrZero 值必须为正数或零 @PositiveOrZero @Negative 值必须为负数 @Negative 字符串校验 注解 功能说明 示例 @Email 必须是合法邮箱地址 @Email(message=\u0026quot;邮箱格式错误\u0026quot;) @Pattern 必须匹配正则表达式 @Pattern(regexp=\u0026quot;\\\\d{3}-\\\\d{3}\u0026quot;) 日期校验 注解 功能说明 示例 @Past 必须是过去的日期 @Past @Future 必须是将来的日期 @Future @PastOrPresent 必须是过去或当前日期 @PastOrPresent @FutureOrPresent 必须是将来或当前日期 @FutureOrPresent Validation关于直接对JSON的日期格式进行校验，需要使用正则表达式 @Pattern(regexp = \u0026ldquo;\u0026quot;)或者自定义注解，建议直接使用Jackson的@JsonFormat。\n4. 分组校验 在实际项目中，不同场景可能需要不同的校验规则，例如新增和更新时字段要求可能不同。可以通过 分组校验 实现。\n分组接口 1 2 3 4 public class Group{ public interface CreateGroup {} public interface UpdateGroup {} } 数据模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import javax.validation.constraints.*; public class User { @NotNull(message = \u0026#34;用户ID不能为空\u0026#34;, groups = Group.UpdateGroup.class) private Long id; @NotBlank(message = \u0026#34;用户名不能为空\u0026#34;, groups = Group.CreateGroup.class) private String username; @NotBlank(message = \u0026#34;密码不能为空\u0026#34;, groups = GroupCreateGroup.class) private String password; // Getter \u0026amp; Setter } Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) @Validated public class UserController { @PostMapping(\u0026#34;/create\u0026#34;) public String create(@RequestBody @Validated(CreateGroup.class) User user) { return \u0026#34;创建成功：\u0026#34; + user.getUsername(); } @PostMapping(\u0026#34;/update\u0026#34;) public String update(@RequestBody @Validated(UpdateGroup.class) User user) { return \u0026#34;更新成功：\u0026#34; + user.getId(); } } 5. 自定义校验 当现有的注解无法满足需求时，可以自定义校验注解。\n自定义注解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import javax.validation.Constraint; import javax.validation.Payload; import java.lang.annotation.*; @Documented @Constraint(validatedBy = UsernameValidator.class) // 关联校验器 @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface ValidUsername { String message() default \u0026#34;用户名非法\u0026#34;; Class\u0026lt;?\u0026gt;[] groups() default {}; Class\u0026lt;? extends Payload\u0026gt;[] payload() default {}; } 自定义校验器 1 2 3 4 5 6 7 8 9 import javax.validation.ConstraintValidator; import javax.validation.ConstraintValidatorContext; public class UsernameValidator implements ConstraintValidator\u0026lt;ValidUsername, String\u0026gt; { @Override public boolean isValid(String value, ConstraintValidatorContext context) { return value != null \u0026amp;\u0026amp; value.matches(\u0026#34;^[a-zA-Z0-9]+$\u0026#34;); } } 使用自定义注解 1 2 3 4 5 6 public class User { @ValidUsername private String username; // Getter \u0026amp; Setter } ","permalink":"https://azasdw.github.io/posts/validation/","summary":"\u003cp\u003e在日常开发中，参数校验是一个常见需求，而 Java 的 \u003cstrong\u003eBean Validation\u003c/strong\u003e 提供了一种优雅的方式，通过注解对对象的字段进行校验。Spring 对此功能进行了深度整合，使得在 Controller、Service 等层面实现校验变得非常简单。\u003c/p\u003e\n\u003cp\u003e本文将从以下几个方面介绍如何在 Spring 中使用 Validation 注解：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e引入依赖\u003c/li\u003e\n\u003cli\u003e简单示例\u003c/li\u003e\n\u003cli\u003e常见校验注解分类与说明\u003c/li\u003e\n\u003cli\u003e分组校验\u003c/li\u003e\n\u003cli\u003e自定义校验\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-引入依赖\"\u003e1. 引入依赖\u003c/h2\u003e\n\u003cp\u003e在使用 Spring 校验功能之前，需要引入相关依赖。\u003cbr\u003e\n通常使用 Hibernate Validator 作为 JSR 380 的实现。\u003c/p\u003e\n\u003ch3 id=\"maven\"\u003eMaven\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan style=\"font-weight:bold\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-validation\u003cspan style=\"font-weight:bold\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"gradle\"\u003eGradle\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-groovy\" data-lang=\"groovy\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimplementation \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#39;org.springframework.boot:spring-boot-starter-validation\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"2-简单示例\"\u003e2. 简单示例\u003c/h2\u003e\n\u003cp\u003e以下是一个基本的参数校验示例。我们通过 \u003ccode\u003e@NotNull\u003c/code\u003e, \u003ccode\u003e@Size\u003c/code\u003e 等注解对参数进行校验，并在校验失败时返回错误信息。\u003c/p\u003e\n\u003ch3 id=\"数据模型\"\u003e数据模型\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eimport\u003c/span\u003e javax.validation.constraints.NotNull;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eimport\u003c/span\u003e javax.validation.constraints.Size;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fff;font-weight:bold\"\u003eclass\u003c/span\u003e User {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @NotNull(message = \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;用户名不能为空\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Size(min = 3, max = 15, message = \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;用户名长度必须在3到15个字符之间\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003eprivate\u003c/span\u003e String username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @NotNull(message = \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;密码不能为空\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Size(min = 6, message = \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;密码长度至少为6个字符\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003eprivate\u003c/span\u003e String password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#007f7f\"\u003e// Getter \u0026amp; Setter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e String getUsername() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fff;font-weight:bold\"\u003ereturn\u003c/span\u003e username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fff;font-weight:bold\"\u003evoid\u003c/span\u003e setUsername(String username) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fff;font-weight:bold\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#007f7f\"\u003eusername\u003c/span\u003e = username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e String getPassword() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fff;font-weight:bold\"\u003ereturn\u003c/span\u003e password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fff;font-weight:bold\"\u003evoid\u003c/span\u003e setPassword(String password) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fff;font-weight:bold\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#007f7f\"\u003epassword\u003c/span\u003e = password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"controller\"\u003eController\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eimport\u003c/span\u003e org.springframework.validation.annotation.Validated;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eimport\u003c/span\u003e org.springframework.web.bind.annotation.*;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eimport\u003c/span\u003e javax.validation.Valid;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@RestController\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@RequestMapping(\u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;/users\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Validated\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fff;font-weight:bold\"\u003eclass\u003c/span\u003e UserController {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @PostMapping(\u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;/register\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fff;font-weight:bold\"\u003epublic\u003c/span\u003e String register(@RequestBody @Valid User user) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fff;font-weight:bold\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#0ff;font-weight:bold\"\u003e\u0026#34;用户注册成功：\u0026#34;\u003c/span\u003e + user.\u003cspan style=\"color:#007f7f\"\u003egetUsername\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"测试\"\u003e测试\u003c/h3\u003e\n\u003cp\u003e请求示例：\u003c/p\u003e","title":"Spring中Validation注解使用"},{"content":"frp内网穿透 要实现内网穿透，可以使用一些常见的内网穿透软件，如：\nfrp (Fast Reverse Proxy) ：高性能的反向代理应用，可以实现内网服务的穿透。 ngrok：易于使用的反向代理工具。 ZeroTier：一个虚拟网络，可以轻松地将设备连接到同一个网络中。 这里以 frp 为例，来讲解如何设置内网穿透：\nA为局域网内的主机，B为拥有公网IP的服务器主机\n安装 frp 下载 frp 在服务器 B 和主机 A 上都下载 frp：\n1 2 3 4 5 6 7 8 9 # 在服务器 B 上 wget https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz tar -xzf frp_0.40.0_linux_amd64.tar.gz cd frp_0.40.0_linux_amd64 # 在主机 A 上 wget https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz tar -xzf frp_0.40.0_linux_amd64.tar.gz cd frp_0.40.0_linux_amd64 配置服务器 B（frps.ini） 在服务器 B 上创建 frps.ini 配置文件：\n1 2 [common] bind_port = 7000 启动 frp 服务端：\n1 ./frps -c ./frps.ini 配置主机 A（frpc.ini） 在主机 A 上创建 frpc.ini 配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [common] server_addr = \u0026lt;服务器B的公网IP\u0026gt; server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 [mysql] type = tcp local_ip = 127.0.0.1 local_port = 3306 remote_port = 6001 启动 frp 客户端：\n1 ./frpc -c ./frpc.ini 使用方式 现在可以通过服务器 B 的公网 IP 访问主机 A 的 SSH 服务： 1 ssh -p 6000 \u0026lt;用户名\u0026gt;@\u0026lt;服务器B的公网IP\u0026gt; 也可以通过服务器 B 的公网 IP 访问主机 A 的 MySQL 服务： 1 mysql -h \u0026lt;服务器B的公网IP\u0026gt; -P 6001 -u \u0026lt;用户名\u0026gt; -p 注意事项 确保防火墙允许相应的端口（如7000, 6000, 6001）通过。 根据需要修改配置文件中的端口和其他参数。 这样，通过 frp，你就可以在公网服务器 B 上访问到局域网主机 A 上的 SSH 和 MySQL 服务了。\n开启自启动 在 Ubuntu 中，可以通过创建 systemd 服务文件来设置开机自启动，以下为配置 frp 在启动时自动运行，并在后台运行为例。以下是详细步骤：\n配置 frp 服务自启动 创建 frp 服务文件 首先，在 /etc/systemd/system/ 目录下创建 frp 服务文件，例如 frps.service（针对服务器端）或 frpc.service（针对客户端）：\n1 sudo nano /etc/systemd/system/frps.service 添加以下内容：\n1 2 3 4 5 6 7 8 9 10 11 [Unit] Description=FRP Server Service After=network.target [Service] Type=simple ExecStart=/path/to/frp/frps -c /path/to/frp/frps.ini Restart=on-failure [Install] WantedBy=multi-user.target 将 /path/to/frp/frps 和 /path/to/frp/frps.ini 替换为你的 frp 可执行文件和配置文件的实际路径。\n对于 frp 客户端，创建 frpc.service 文件并添加以下内容：\n1 2 3 4 5 6 7 8 9 10 11 [Unit] Description=FRP Client Service After=network.target [Service] Type=simple ExecStart=/path/to/frp/frpc -c /path/to/frp/frpc.ini Restart=on-failure [Install] WantedBy=multi-user.target 同样，将 /path/to/frp/frpc 和 /path/to/frp/frpc.ini 替换为你的 frp 客户端可执行文件和配置文件的实际路径。\n重新加载 systemd 配置 创建服务文件后，重新加载 systemd 配置：\n1 sudo systemctl daemon-reload 启用并启动 frp 服务 启用 frp 服务，使其在系统启动时自动运行：\n1 2 sudo systemctl enable frps.service sudo systemctl start frps.service 对于 frp 客户端：\n1 2 sudo systemctl enable frpc.service sudo systemctl start frpc.service 检查服务状态 可以使用以下命令检查 frp 服务的状态：\n1 sudo systemctl status frps.service 对于 frp 客户端：\n1 sudo systemctl status frpc.service ","permalink":"https://azasdw.github.io/posts/frp/","summary":"\u003ch2 id=\"frp内网穿透\"\u003efrp内网穿透\u003c/h2\u003e\n\u003cp\u003e要实现内网穿透，可以使用一些常见的内网穿透软件，如：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003efrp (Fast Reverse Proxy)\u003c/strong\u003e ：高性能的反向代理应用，可以实现内网服务的穿透。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003engrok\u003c/strong\u003e：易于使用的反向代理工具。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eZeroTier\u003c/strong\u003e：一个虚拟网络，可以轻松地将设备连接到同一个网络中。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这里以 frp 为例，来讲解如何设置内网穿透：\u003c/p\u003e\n\u003cp\u003eA为局域网内的主机，B为拥有公网IP的服务器主机\u003c/p\u003e\n\u003ch3 id=\"安装-frp\"\u003e安装 frp\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e下载 frp\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在服务器 B 和主机 A 上都下载 frp：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#007f7f\"\u003e# 在服务器 B 上\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar -xzf frp_0.40.0_linux_amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003ecd\u003c/span\u003e frp_0.40.0_linux_amd64\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#007f7f\"\u003e# 在主机 A 上\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar -xzf frp_0.40.0_linux_amd64.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003ecd\u003c/span\u003e frp_0.40.0_linux_amd64\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003e配置服务器 B（frps.ini）\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在服务器 B 上创建 \u003ccode\u003efrps.ini\u003c/code\u003e 配置文件：\u003c/p\u003e","title":"frp实现内网穿透"},{"content":" 该站点使用hugo进行的搭建，并且实现了自动化部署，在搭建过程当中也踩了不少的坑，这里记录一些。\n站点搭建简介 框架选取 市面上有很多不用写代码就可以建站的工具，比如worldpress,hexo等等。\n大致可以分为两类，一类是静态网站生成器，比如hexo, hugo等, 是将写作对应的markdown文件渲染成静态网页，因为是静态文件，速度会比较快，并且搭建简单，尤其适合个人网站的搭建。\n另一类是动态网站，比如worldpress、Halo等，这些需要涉及到数据库的交互，更适合企业，比如一些电商之类的，搭建会略微比前者复杂一丢丢（都是个人网站其实也没复杂多少啦，多了数据库交互而已）。因为存在数据库，后期维护以及拓展其他功能会比静态网站强大很多，对应更多的学习成本。\n为什么选择hugo?\n感觉它star比较多（算理由吗？）。。。\n之前用过worldpress,Halo又要php又要MySQL，本就弱鸡的服务器勉强能够带起来，访问的速度非常的慢，体验糟糕。\n因此还是选用了静态网站生成器，hugo和hexo中选择了前者，hugo的star多一点。\n国内存在一些非官方的文档，这里仍然推荐官方文档，大陆可能会访问的慢一点。\n官方文档：Quick start | Hugo\n安装主题 主题使用的是PaperMod，同时在演示demo也有hugo安装步骤。\nFeatures · adityatelange/hugo-PaperMod Wiki\n部署 部署一是静态网站托管，二是部署在云服务器上。\n该站点部署在云服务器上，代码托管在gitea，同时使用gitea仓库的webhook实现自动化部署。\n一般都是在windows下进行写作，写好把静态网站传到服务器就好了，我这里是把对应的写作的md以及配置文件上传保存到仓库，这样可以实现在其他电脑上也可以写作。这就要求服务器要有对应的hugo来生成静态网页。\n踩到的坑 版本保证一致 在本地hugo能够正常生成静态文件，到了服务器上使用hugo命令就不行了。原因如下\nhugo版本对不上 hugo在windows下和Linux的配置文件不同 hugo在云服务上的版本要和本地的版本保持一致，使用hugo version命令可以查看\nhugo是windows下的配置文件是hugo开头的，但是在Linux上的config开头的，顺便也可以把它当中开发和生成对应的配置文件。:dog2:\n要补的坑 自动化部署使用git hooks，原理是git仓库在内容在更新后会向某个地址或IP（服务器地址）推送一个POST请求，服务器上使用python脚本一直监听该请求，在收到请求后执行git pull的操作，触发本地git hooks，在执行hugo部署的命令。\n这个过程第一次配置还是蛮麻烦的，我省略了python脚本对密钥的判断，以及执行git pull的权限判断（仓库设为了共有的。。）后面再慢慢搞。\n","permalink":"https://azasdw.github.io/posts/hugo%E6%90%AD%E5%BB%BA/","summary":"\u003cblockquote\u003e\n\u003cp\u003e该站点使用hugo进行的搭建，并且实现了自动化部署，在搭建过程当中也踩了不少的坑，这里记录一些。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"站点搭建简介\"\u003e站点搭建简介\u003c/h3\u003e\n\u003ch3 id=\"框架选取\"\u003e框架选取\u003c/h3\u003e\n\u003cp\u003e市面上有很多不用写代码就可以建站的工具，比如worldpress,hexo等等。\u003c/p\u003e\n\u003cp\u003e大致可以分为两类，一类是静态网站生成器，比如hexo, hugo等, 是将写作对应的markdown文件渲染成静态网页，因为是静态文件，速度会比较快，并且搭建简单，尤其适合个人网站的搭建。\u003c/p\u003e\n\u003cp\u003e另一类是动态网站，比如worldpress、Halo等，这些需要涉及到数据库的交互，更适合企业，比如一些电商之类的，搭建会略微比前者复杂一丢丢（都是个人网站其实也没复杂多少啦，多了数据库交互而已）。因为存在数据库，后期维护以及拓展其他功能会比静态网站强大很多，对应更多的学习成本。\u003c/p\u003e\n\u003cp\u003e为什么选择hugo?\u003c/p\u003e\n\u003cp\u003e感觉它star比较多（算理由吗？）。。。\u003c/p\u003e\n\u003cp\u003e之前用过worldpress,Halo又要php又要MySQL，本就弱鸡的服务器勉强能够带起来，访问的速度非常的慢，体验糟糕。\u003c/p\u003e\n\u003cp\u003e因此还是选用了静态网站生成器，hugo和hexo中选择了前者，hugo的star多一点。\u003c/p\u003e\n\u003cp\u003e国内存在一些非官方的文档，这里仍然推荐官方文档，大陆可能会访问的慢一点。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e官方文档：\u003ca href=\"https://gohugo.io/getting-started/quick-start/\"\u003eQuick start | Hugo\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"安装主题\"\u003e安装主题\u003c/h3\u003e\n\u003cp\u003e主题使用的是PaperMod，同时在演示demo也有hugo安装步骤。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/wiki/Features\"\u003eFeatures · adityatelange/hugo-PaperMod Wiki\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"部署\"\u003e部署\u003c/h3\u003e\n\u003cp\u003e部署一是静态网站托管，二是部署在云服务器上。\u003c/p\u003e\n\u003cp\u003e该站点部署在云服务器上，代码托管在gitea，同时使用gitea仓库的webhook实现自动化部署。\u003c/p\u003e\n\u003cp\u003e一般都是在windows下进行写作，写好把静态网站传到服务器就好了，我这里是把对应的写作的md以及配置文件上传保存到仓库，这样可以实现在其他电脑上也可以写作。这就要求服务器要有对应的hugo来生成静态网页。\u003c/p\u003e\n\u003ch2 id=\"踩到的坑\"\u003e踩到的坑\u003c/h2\u003e\n\u003ch3 id=\"版本保证一致\"\u003e版本保证一致\u003c/h3\u003e\n\u003cp\u003e在本地hugo能够正常生成静态文件，到了服务器上使用hugo命令就不行了。原因如下\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ehugo版本对不上\u003c/li\u003e\n\u003cli\u003ehugo在windows下和Linux的配置文件不同\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ehugo在云服务上的版本要和本地的版本保持一致，使用\u003ccode\u003ehugo version\u003c/code\u003e命令可以查看\u003c/p\u003e\n\u003cp\u003ehugo是windows下的配置文件是hugo开头的，但是在Linux上的config开头的，顺便也可以把它当中开发和生成对应的配置文件。:dog2:\u003c/p\u003e\n\u003ch2 id=\"要补的坑\"\u003e要补的坑\u003c/h2\u003e\n\u003cp\u003e自动化部署使用git hooks，原理是git仓库在内容在更新后会向某个地址或IP（服务器地址）推送一个POST请求，服务器上使用python脚本一直监听该请求，在收到请求后执行git pull的操作，触发本地git hooks，在执行hugo部署的命令。\u003c/p\u003e\n\u003cp\u003e这个过程第一次配置还是蛮麻烦的，我省略了python脚本对密钥的判断，以及执行git pull的权限判断（仓库设为了共有的。。）后面再慢慢搞。\u003c/p\u003e","title":"使用hugo创建个人网站"},{"content":"About Me 👋 嘿，你好！我是一名Java开发工程师 💻，热爱编程，对技术充满好奇 🧐，同时也爱分享自己经验心得 📚。\n工作外，经常关注数码圈，喜欢自己DIY攒机，折腾一些没用的技术，生命不息，折腾不止~🚀🚀\n总之，生活对我来说就像是写一段无尽的代码，总是充满了探索和惊喜！✨\n如果你也对技术充满热情，或者有任何问题，随时来找我聊哦！\n","permalink":"https://azasdw.github.io/about/","summary":"\u003ch2 id=\"about-me\"\u003eAbout Me\u003c/h2\u003e\n\u003cp\u003e👋 嘿，你好！我是一名Java开发工程师 💻，热爱编程，对技术充满好奇 🧐，同时也爱分享自己经验心得 📚。\u003c/p\u003e\n\u003cp\u003e工作外，经常关注数码圈，喜欢自己DIY攒机，折腾一些没用的技术，生命不息，折腾不止~🚀🚀\u003c/p\u003e\n\u003cp\u003e总之，生活对我来说就像是写一段无尽的代码，总是充满了探索和惊喜！✨\u003c/p\u003e\n\u003cp\u003e如果你也对技术充满热情，或者有任何问题，随时来找我聊哦！\u003c/p\u003e","title":""}]